// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoneWare.Data;

namespace StoneWare.Migrations
{
    [DbContext(typeof(StoneWareContext))]
    [Migration("20200221220729_UpdateDateLogic")]
    partial class UpdateDateLogic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.ToTable("Issue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperatingSystemId = 4,
                            Problem = "If we compress the matrix, we can get to the SSL matrix through the bluetooth SSL matrix!",
                            ProductId = 4,
                            Resolution = "Use the wireless JBOD application, then you can synthesize the wireless application!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 45, 36, 995, DateTimeKind.Local).AddTicks(1572),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 2,
                            OperatingSystemId = 2,
                            Problem = "The XML alarm is down, override the haptic alarm so we can override the XML alarm!",
                            ProductId = 3,
                            Resolution = "The AI matrix is down, index the digital matrix so we can index the AI matrix!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 43, 26, 499, DateTimeKind.Local).AddTicks(2526),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 3,
                            OperatingSystemId = 1,
                            Problem = "If we reboot the capacitor, we can get to the HTTP capacitor through the cross-platform HTTP capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 45, 23, 37, DateTimeKind.Local).AddTicks(7001),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 4,
                            OperatingSystemId = 5,
                            Problem = "Try to compress the ADP interface, maybe it will compress the 1080p interface!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 6, 3, 11, 895, DateTimeKind.Local).AddTicks(1240),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 5,
                            OperatingSystemId = 2,
                            Problem = "If we quantify the program, we can get to the TCP program through the digital TCP program!",
                            ProductId = 2,
                            Resolution = "Use the 1080p HDD sensor, then you can override the 1080p sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 3, 43, 54, 576, DateTimeKind.Local).AddTicks(6565),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 6,
                            OperatingSystemId = 1,
                            Problem = "Use the cross-platform CSS capacitor, then you can copy the cross-platform capacitor!",
                            ProductId = 3,
                            Resolution = "If we program the driver, we can get to the USB driver through the virtual USB driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 11, 59, 51, 640, DateTimeKind.Local).AddTicks(9911),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 7,
                            OperatingSystemId = 3,
                            Problem = "If we transmit the feed, we can get to the FTP feed through the virtual FTP feed!",
                            ProductId = 1,
                            Resolution = "I'll compress the haptic PCI bus, that should bus the PCI bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 12, 58, 38, 296, DateTimeKind.Local).AddTicks(1880),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 8,
                            OperatingSystemId = 3,
                            Problem = "Use the virtual CSS protocol, then you can input the virtual protocol!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 16, 35, 46, DateTimeKind.Local).AddTicks(7681),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 9,
                            OperatingSystemId = 3,
                            Problem = "The THX program is down, transmit the redundant program so we can transmit the THX program!",
                            ProductId = 1,
                            Resolution = "We need to navigate the bluetooth RAM bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 34, 48, 412, DateTimeKind.Local).AddTicks(1310),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 10,
                            OperatingSystemId = 4,
                            Problem = "You can't quantify the pixel without backing up the redundant HTTP pixel!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 11, 55, 54, 229, DateTimeKind.Local).AddTicks(7825),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 11,
                            OperatingSystemId = 5,
                            Problem = "Use the primary CSS transmitter, then you can navigate the primary transmitter!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 0, 46, 38, 799, DateTimeKind.Local).AddTicks(2620),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 12,
                            OperatingSystemId = 3,
                            Problem = "You can't calculate the matrix without generating the optical JSON matrix!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 21, 15, 34, 480, DateTimeKind.Local).AddTicks(5090),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 13,
                            OperatingSystemId = 3,
                            Problem = "I'll hack the solid state COM hard drive, that should hard drive the COM hard drive!",
                            ProductId = 4,
                            Resolution = "If we compress the application, we can get to the IB application through the auxiliary IB application!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 11, 2, 0, 284, DateTimeKind.Local).AddTicks(8490),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 14,
                            OperatingSystemId = 4,
                            Problem = "If we connect the protocol, we can get to the PNG protocol through the haptic PNG protocol!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 12, 50, 8, DateTimeKind.Local).AddTicks(241),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 15,
                            OperatingSystemId = 2,
                            Problem = "I'll navigate the neural SAS card, that should card the SAS card!",
                            ProductId = 3,
                            Resolution = "Try to connect the RSS transmitter, maybe it will connect the neural transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 20, 39, 460, DateTimeKind.Local).AddTicks(8073),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 16,
                            OperatingSystemId = 2,
                            Problem = "The FTP firewall is down, compress the back-end firewall so we can compress the FTP firewall!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 17, 19, 7, 568, DateTimeKind.Local).AddTicks(400),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 17,
                            OperatingSystemId = 2,
                            Problem = "We need to connect the primary AGP microchip!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 42, 15, 251, DateTimeKind.Local).AddTicks(2162),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 18,
                            OperatingSystemId = 5,
                            Problem = "We need to compress the primary GB array!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 15, 18, 833, DateTimeKind.Local).AddTicks(6493),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 19,
                            OperatingSystemId = 4,
                            Problem = "If we index the panel, we can get to the IB panel through the optical IB panel!",
                            ProductId = 2,
                            Resolution = "Use the digital XSS program, then you can connect the digital program!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 1, 2, 58, 971, DateTimeKind.Local).AddTicks(6989),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 20,
                            OperatingSystemId = 2,
                            Problem = "Try to synthesize the THX hard drive, maybe it will synthesize the solid state hard drive!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 9, 32, 3, 98, DateTimeKind.Local).AddTicks(2667),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 21,
                            OperatingSystemId = 1,
                            Problem = "Use the cross-platform CSS capacitor, then you can override the cross-platform capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 4, 48, 28, 810, DateTimeKind.Local).AddTicks(6344),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 22,
                            OperatingSystemId = 1,
                            Problem = "You can't parse the feed without transmitting the neural THX feed!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 6, 40, 47, 596, DateTimeKind.Local).AddTicks(4234),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 23,
                            OperatingSystemId = 5,
                            Problem = "If we connect the program, we can get to the ADP program through the mobile ADP program!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 9, 2, 59, 455, DateTimeKind.Local).AddTicks(1671),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 24,
                            OperatingSystemId = 5,
                            Problem = "The PCI feed is down, generate the auxiliary feed so we can generate the PCI feed!",
                            ProductId = 1,
                            Resolution = "We need to parse the mobile PCI capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 11, 41, 36, 995, DateTimeKind.Local).AddTicks(3884),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 25,
                            OperatingSystemId = 3,
                            Problem = "We need to transmit the bluetooth FTP feed!",
                            ProductId = 1,
                            Resolution = "We need to input the multi-byte JSON capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 22, 7, 2, 909, DateTimeKind.Local).AddTicks(388),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 26,
                            OperatingSystemId = 4,
                            Problem = "I'll hack the neural ADP port, that should port the ADP port!",
                            ProductId = 1,
                            Resolution = "Use the digital ADP bandwidth, then you can index the digital bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 11, 38, 23, 51, DateTimeKind.Local).AddTicks(3453),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 27,
                            OperatingSystemId = 3,
                            Problem = "You can't quantify the matrix without transmitting the back-end XML matrix!",
                            ProductId = 4,
                            Resolution = "connecting the program won't do anything, we need to quantify the primary JBOD program!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 17, 31, 37, 330, DateTimeKind.Local).AddTicks(9361),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 28,
                            OperatingSystemId = 4,
                            Problem = "You can't override the capacitor without overriding the mobile XML capacitor!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 54, 40, 113, DateTimeKind.Local).AddTicks(7317),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 29,
                            OperatingSystemId = 3,
                            Problem = "You can't parse the protocol without quantifying the cross-platform SAS protocol!",
                            ProductId = 1,
                            Resolution = "You can't program the capacitor without navigating the redundant TCP capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 20, 20, 8, 285, DateTimeKind.Local).AddTicks(8191),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 30,
                            OperatingSystemId = 2,
                            Problem = "quantifying the driver won't do anything, we need to program the wireless SQL driver!",
                            ProductId = 4,
                            Resolution = "Try to copy the PNG sensor, maybe it will copy the 1080p sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 7, 19, 11, 96, DateTimeKind.Local).AddTicks(697),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 31,
                            OperatingSystemId = 3,
                            Problem = "You can't parse the hard drive without generating the digital AGP hard drive!",
                            ProductId = 1,
                            Resolution = "connecting the system won't do anything, we need to synthesize the mobile ADP system!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 8, 1, 16, 418, DateTimeKind.Local).AddTicks(164),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 32,
                            OperatingSystemId = 3,
                            Problem = "We need to reboot the open-source CSS sensor!",
                            ProductId = 1,
                            Resolution = "If we synthesize the circuit, we can get to the SCSI circuit through the virtual SCSI circuit!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 53, 22, 979, DateTimeKind.Local).AddTicks(6028),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 33,
                            OperatingSystemId = 4,
                            Problem = "Try to navigate the JSON port, maybe it will navigate the online port!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 17, 40, 37, 778, DateTimeKind.Local).AddTicks(5398),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 34,
                            OperatingSystemId = 2,
                            Problem = "If we copy the monitor, we can get to the USB monitor through the haptic USB monitor!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 7, 43, 25, 37, DateTimeKind.Local).AddTicks(4240),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 35,
                            OperatingSystemId = 1,
                            Problem = "Try to program the SDD circuit, maybe it will program the wireless circuit!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 22, 39, 23, 381, DateTimeKind.Local).AddTicks(2741),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 36,
                            OperatingSystemId = 6,
                            Problem = "I'll program the neural TCP matrix, that should matrix the TCP matrix!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 0, 52, 15, 204, DateTimeKind.Local).AddTicks(1136),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 37,
                            OperatingSystemId = 2,
                            Problem = "Try to parse the PNG panel, maybe it will parse the haptic panel!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 28, 8, 23, DateTimeKind.Local).AddTicks(8976),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 38,
                            OperatingSystemId = 2,
                            Problem = "Try to index the HDD driver, maybe it will index the cross-platform driver!",
                            ProductId = 1,
                            Resolution = "If we calculate the transmitter, we can get to the EXE transmitter through the cross-platform EXE transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 13, 29, 32, 304, DateTimeKind.Local).AddTicks(3474),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 39,
                            OperatingSystemId = 5,
                            Problem = "overriding the hard drive won't do anything, we need to input the primary ADP hard drive!",
                            ProductId = 4,
                            Resolution = "navigating the monitor won't do anything, we need to input the wireless JSON monitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 8, 27, 21, 890, DateTimeKind.Local).AddTicks(8822),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 40,
                            OperatingSystemId = 2,
                            Problem = "The SSL bus is down, index the 1080p bus so we can index the SSL bus!",
                            ProductId = 3,
                            Resolution = "We need to hack the primary THX system!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 13, 11, 24, 488, DateTimeKind.Local).AddTicks(667),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 41,
                            OperatingSystemId = 2,
                            Problem = "We need to program the 1080p SMS transmitter!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 57, 51, 710, DateTimeKind.Local).AddTicks(6553),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 42,
                            OperatingSystemId = 1,
                            Problem = "parsing the driver won't do anything, we need to calculate the redundant SAS driver!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 7, 17, 35, 329, DateTimeKind.Local).AddTicks(1138),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 43,
                            OperatingSystemId = 5,
                            Problem = "If we navigate the pixel, we can get to the SCSI pixel through the bluetooth SCSI pixel!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 9, 55, 776, DateTimeKind.Local).AddTicks(1750),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 44,
                            OperatingSystemId = 3,
                            Problem = "programming the application won't do anything, we need to program the digital SCSI application!",
                            ProductId = 4,
                            Resolution = "You can't program the array without connecting the neural SSL array!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 4, 57, 18, 838, DateTimeKind.Local).AddTicks(7120),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 45,
                            OperatingSystemId = 5,
                            Problem = "If we override the interface, we can get to the RAM interface through the online RAM interface!",
                            ProductId = 4,
                            Resolution = "The SCSI program is down, hack the neural program so we can hack the SCSI program!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 16, 58, 57, 124, DateTimeKind.Local).AddTicks(2694),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 46,
                            OperatingSystemId = 4,
                            Problem = "I'll parse the 1080p EXE bus, that should bus the EXE bus!",
                            ProductId = 2,
                            Resolution = "Try to parse the SMTP feed, maybe it will parse the multi-byte feed!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 2, 14, 40, 694, DateTimeKind.Local).AddTicks(6009),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 47,
                            OperatingSystemId = 6,
                            Problem = "programming the system won't do anything, we need to synthesize the primary AGP system!",
                            ProductId = 4,
                            Resolution = "Use the solid state HTTP microchip, then you can back up the solid state microchip!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 16, 0, 392, DateTimeKind.Local).AddTicks(7603),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 48,
                            OperatingSystemId = 5,
                            Problem = "Try to hack the GB program, maybe it will hack the 1080p program!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 5, 4, 9, 415, DateTimeKind.Local).AddTicks(5796),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 49,
                            OperatingSystemId = 5,
                            Problem = "I'll synthesize the primary TCP card, that should card the TCP card!",
                            ProductId = 1,
                            Resolution = "You can't program the firewall without connecting the wireless AI firewall!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 23, 44, 9, 192, DateTimeKind.Local).AddTicks(3426),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 50,
                            OperatingSystemId = 3,
                            Problem = "Use the open-source RAM circuit, then you can index the open-source circuit!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 15, 15, 39, 422, DateTimeKind.Local).AddTicks(1709),
                            VersionNumberId = 1
                        });
                });

            modelBuilder.Entity("StoneWare.Models.OperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("OperatingSystem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Day Trader Wannabe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Investment Overlord"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Workout Planner"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Social Anxiety Planner"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("VersionNumberId");

                    b.ToTable("ProductVersionOs");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 6,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 3,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 6,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 6,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Outstanding"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Resolved"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.VersionNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("VersionNumber");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "1.2"
                        },
                        new
                        {
                            Id = 4,
                            Description = "1.3"
                        },
                        new
                        {
                            Id = 5,
                            Description = "2.0"
                        },
                        new
                        {
                            Id = 6,
                            Description = "2.1"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.HasOne("StoneWare.Models.Status", "Status")
                        .WithMany("Issue")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Issue_Status")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.ProductVersionOs", "ProductVersionOs")
                        .WithMany("Issue")
                        .HasForeignKey("ProductId", "OperatingSystemId", "VersionNumberId")
                        .HasConstraintName("FK_Issue_ProductVersionOs")
                        .IsRequired();
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.HasOne("StoneWare.Models.OperatingSystem", "OperatingSystem")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("OperatingSystemId")
                        .HasConstraintName("FK_ProductVersionOs_OperatingSystem")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.Product", "Product")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductVersionOs_Product")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.VersionNumber", "VersionNumber")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("VersionNumberId")
                        .HasConstraintName("FK_ProductVersionOs_VersionNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
