// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoneWare.Data;

namespace StoneWare.Migrations
{
    [DbContext(typeof(StoneWareContext))]
    [Migration("20200221100909_ReviseIssueCreatedAtSeedLogic")]
    partial class ReviseIssueCreatedAtSeedLogic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.ToTable("Issue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperatingSystemId = 4,
                            Problem = "We need to generate the multi-byte SMTP port!",
                            ProductId = 4,
                            Resolution = "I'll input the digital SMTP feed, that should feed the SMTP feed!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 8, 13, 16, 31, 650, DateTimeKind.Unspecified).AddTicks(2326),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 7, 58, 15, 945, DateTimeKind.Local).AddTicks(1261),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 2,
                            OperatingSystemId = 2,
                            Problem = "Use the bluetooth SCSI alarm, then you can navigate the bluetooth alarm!",
                            ProductId = 3,
                            Resolution = "We need to connect the mobile TCP bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 9, 18, 7, 12, 384, DateTimeKind.Unspecified).AddTicks(4081),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 11, 56, 12, 877, DateTimeKind.Local).AddTicks(5344),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 3,
                            OperatingSystemId = 3,
                            Problem = "Use the solid state XSS firewall, then you can reboot the solid state firewall!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 5, 8, 34, 51, 877, DateTimeKind.Unspecified).AddTicks(3154),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 7, 28, 494, DateTimeKind.Local).AddTicks(2720),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 4,
                            OperatingSystemId = 2,
                            Problem = "You can't calculate the interface without bypassing the virtual AGP interface!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 10, 5, 44, 53, 390, DateTimeKind.Unspecified).AddTicks(9259),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 53, 26, 4, DateTimeKind.Local).AddTicks(4068),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 5,
                            OperatingSystemId = 2,
                            Problem = "Use the multi-byte HDD hard drive, then you can connect the multi-byte hard drive!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 10, 17, 26, 26, 741, DateTimeKind.Unspecified).AddTicks(2651),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 23, 27, 26, 190, DateTimeKind.Local).AddTicks(4517),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 6,
                            OperatingSystemId = 2,
                            Problem = "Use the cross-platform CSS capacitor, then you can copy the cross-platform capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 11, 21, 32, 59, 563, DateTimeKind.Unspecified).AddTicks(4288),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 0, 1, 31, 599, DateTimeKind.Local).AddTicks(4033),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 7,
                            OperatingSystemId = 2,
                            Problem = "We need to back up the neural RAM monitor!",
                            ProductId = 1,
                            Resolution = "Try to parse the FTP transmitter, maybe it will parse the back-end transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 5, 0, 16, 22, 543, DateTimeKind.Unspecified).AddTicks(7357),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 18, 19, 49, 554, DateTimeKind.Local).AddTicks(9039),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 8,
                            OperatingSystemId = 5,
                            Problem = "We need to override the open-source XSS firewall!",
                            ProductId = 2,
                            Resolution = "Try to bypass the SMTP bandwidth, maybe it will bypass the primary bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 19, 18, 53, 648, DateTimeKind.Unspecified).AddTicks(4264),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 0, 34, 19, 452, DateTimeKind.Local).AddTicks(3207),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 9,
                            OperatingSystemId = 4,
                            Problem = "The SSL bandwidth is down, calculate the neural bandwidth so we can calculate the SSL bandwidth!",
                            ProductId = 4,
                            Resolution = "Use the cross-platform SCSI interface, then you can index the cross-platform interface!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 9, 8, 42, 45, 45, DateTimeKind.Unspecified).AddTicks(167),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 33, 30, 883, DateTimeKind.Local).AddTicks(8938),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 10,
                            OperatingSystemId = 2,
                            Problem = "Use the multi-byte COM feed, then you can back up the multi-byte feed!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 7, 23, 18, 28, 122, DateTimeKind.Unspecified).AddTicks(1047),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 8, 53, 12, 992, DateTimeKind.Local).AddTicks(4325),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 11,
                            OperatingSystemId = 2,
                            Problem = "Try to back up the HDD microchip, maybe it will back up the optical microchip!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 10, 1, 5, 10, 932, DateTimeKind.Unspecified).AddTicks(5204),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 20, 29, 58, 648, DateTimeKind.Local).AddTicks(3024),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 12,
                            OperatingSystemId = 5,
                            Problem = "quantifying the port won't do anything, we need to reboot the virtual SCSI port!",
                            ProductId = 2,
                            Resolution = "Use the multi-byte JSON panel, then you can bypass the multi-byte panel!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 11, 20, 15, 33, 313, DateTimeKind.Unspecified).AddTicks(3516),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 3, 16, 33, 272, DateTimeKind.Local).AddTicks(9540),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 13,
                            OperatingSystemId = 4,
                            Problem = "You can't input the protocol without generating the back-end EXE protocol!",
                            ProductId = 4,
                            Resolution = "Use the auxiliary RAM alarm, then you can generate the auxiliary alarm!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 19, 23, 41, 982, DateTimeKind.Unspecified).AddTicks(869),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 46, 26, 743, DateTimeKind.Local).AddTicks(609),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 14,
                            OperatingSystemId = 4,
                            Problem = "The FTP sensor is down, transmit the cross-platform sensor so we can transmit the FTP sensor!",
                            ProductId = 1,
                            Resolution = "We need to hack the online SAS firewall!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 10, 16, 40, 29, 374, DateTimeKind.Unspecified).AddTicks(4054),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 21, 10, 25, 227, DateTimeKind.Local).AddTicks(62),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 15,
                            OperatingSystemId = 4,
                            Problem = "Use the neural SSL bandwidth, then you can hack the neural bandwidth!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 6, 1, 11, 20, 442, DateTimeKind.Unspecified).AddTicks(2443),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 21, 11, 157, DateTimeKind.Local).AddTicks(4533),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 16,
                            OperatingSystemId = 3,
                            Problem = "You can't reboot the protocol without synthesizing the digital JSON protocol!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 7, 10, 58, 53, 553, DateTimeKind.Unspecified).AddTicks(8422),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 3, 2, 29, 586, DateTimeKind.Local).AddTicks(2848),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 17,
                            OperatingSystemId = 1,
                            Problem = "Try to back up the USB matrix, maybe it will back up the multi-byte matrix!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 7, 10, 31, 17, 264, DateTimeKind.Unspecified).AddTicks(8168),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 23, 22, 55, 185, DateTimeKind.Local).AddTicks(1639),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 18,
                            OperatingSystemId = 5,
                            Problem = "I'll navigate the open-source SSL sensor, that should sensor the SSL sensor!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 7, 22, 26, 5, 332, DateTimeKind.Unspecified).AddTicks(689),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 7, 8, 22, 632, DateTimeKind.Local).AddTicks(8601),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 19,
                            OperatingSystemId = 1,
                            Problem = "I'll back up the multi-byte USB microchip, that should microchip the USB microchip!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 7, 6, 23, 11, 719, DateTimeKind.Unspecified).AddTicks(2372),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 4, 32, 16, 466, DateTimeKind.Local).AddTicks(7278),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 20,
                            OperatingSystemId = 5,
                            Problem = "Use the digital XSS microchip, then you can connect the digital microchip!",
                            ProductId = 2,
                            Resolution = "Try to transmit the FTP transmitter, maybe it will transmit the online transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 8, 35, 35, 250, DateTimeKind.Unspecified).AddTicks(31),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 36, 48, 106, DateTimeKind.Local).AddTicks(3778),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 21,
                            OperatingSystemId = 4,
                            Problem = "parsing the capacitor won't do anything, we need to compress the redundant HTTP capacitor!",
                            ProductId = 3,
                            Resolution = "You can't compress the application without transmitting the wireless RAM application!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 10, 9, 5, 54, 230, DateTimeKind.Unspecified).AddTicks(3208),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 2, 43, 18, 637, DateTimeKind.Local).AddTicks(1082),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 22,
                            OperatingSystemId = 1,
                            Problem = "We need to parse the mobile PCI capacitor!",
                            ProductId = 3,
                            Resolution = "We need to compress the solid state SQL driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 9, 16, 39, 31, 650, DateTimeKind.Unspecified).AddTicks(8802),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 7, 0, 247, DateTimeKind.Local).AddTicks(1115),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 23,
                            OperatingSystemId = 4,
                            Problem = "I'll bypass the mobile HDD application, that should application the HDD application!",
                            ProductId = 2,
                            Resolution = "overriding the capacitor won't do anything, we need to index the multi-byte XML capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 10, 13, 6, 39, 312, DateTimeKind.Unspecified).AddTicks(8296),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 3, 50, 44, 916, DateTimeKind.Local).AddTicks(6950),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 24,
                            OperatingSystemId = 3,
                            Problem = "We need to calculate the primary IB application!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 8, 21, 12, 9, 929, DateTimeKind.Unspecified).AddTicks(878),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 2, 30, 205, DateTimeKind.Local).AddTicks(5302),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 25,
                            OperatingSystemId = 2,
                            Problem = "transmitting the matrix won't do anything, we need to bypass the multi-byte JBOD matrix!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 8, 10, 13, 35, 966, DateTimeKind.Unspecified).AddTicks(466),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 4, 20, 13, 595, DateTimeKind.Local).AddTicks(314),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 26,
                            OperatingSystemId = 2,
                            Problem = "You can't override the capacitor without connecting the cross-platform JSON capacitor!",
                            ProductId = 3,
                            Resolution = "I'll parse the primary CSS sensor, that should sensor the CSS sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 5, 22, 4, 34, 415, DateTimeKind.Unspecified).AddTicks(2320),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 8, 8, 190, DateTimeKind.Local).AddTicks(56),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 27,
                            OperatingSystemId = 3,
                            Problem = "I'll reboot the auxiliary PCI interface, that should interface the PCI interface!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 9, 13, 50, 20, 898, DateTimeKind.Unspecified).AddTicks(7721),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 8, 45, 58, 815, DateTimeKind.Local).AddTicks(9941),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 28,
                            OperatingSystemId = 5,
                            Problem = "quantifying the driver won't do anything, we need to program the wireless SQL driver!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 9, 8, 52, 45, 410, DateTimeKind.Unspecified).AddTicks(5395),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 20, 51, 54, DateTimeKind.Local).AddTicks(4259),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 29,
                            OperatingSystemId = 5,
                            Problem = "If we connect the transmitter, we can get to the IB transmitter through the online IB transmitter!",
                            ProductId = 2,
                            Resolution = "Try to input the CSS capacitor, maybe it will input the multi-byte capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 8, 11, 35, 8, 777, DateTimeKind.Unspecified).AddTicks(5708),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 20, 35, 35, 839, DateTimeKind.Local).AddTicks(2843),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 30,
                            OperatingSystemId = 4,
                            Problem = "Try to override the USB panel, maybe it will override the multi-byte panel!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 9, 17, 14, 39, 686, DateTimeKind.Unspecified).AddTicks(2787),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 10, 8, 16, 726, DateTimeKind.Local).AddTicks(7179),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 31,
                            OperatingSystemId = 2,
                            Problem = "Try to quantify the HTTP array, maybe it will quantify the optical array!",
                            ProductId = 1,
                            Resolution = "You can't connect the capacitor without copying the back-end SSL capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 5, 14, 19, 43, 669, DateTimeKind.Unspecified).AddTicks(3363),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 17, 6, 27, 363, DateTimeKind.Local).AddTicks(8489),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 32,
                            OperatingSystemId = 3,
                            Problem = "Try to input the SAS firewall, maybe it will input the primary firewall!",
                            ProductId = 4,
                            Resolution = "The SQL interface is down, index the bluetooth interface so we can index the SQL interface!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 16, 6, 58, 454, DateTimeKind.Unspecified).AddTicks(3120),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 10, 15, 6, 801, DateTimeKind.Local).AddTicks(6008),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 33,
                            OperatingSystemId = 1,
                            Problem = "I'll connect the bluetooth SMS driver, that should driver the SMS driver!",
                            ProductId = 1,
                            Resolution = "I'll program the neural TCP matrix, that should matrix the TCP matrix!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 18, 10, 38, 398, DateTimeKind.Unspecified).AddTicks(8611),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 15, 31, 38, 391, DateTimeKind.Local).AddTicks(8710),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 34,
                            OperatingSystemId = 2,
                            Problem = "hacking the matrix won't do anything, we need to bypass the haptic COM matrix!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 9, 0, 47, 43, 70, DateTimeKind.Unspecified).AddTicks(7724),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 27, 34, 532, DateTimeKind.Local).AddTicks(1730),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 35,
                            OperatingSystemId = 6,
                            Problem = "Try to generate the HTTP protocol, maybe it will generate the auxiliary protocol!",
                            ProductId = 4,
                            Resolution = "You can't generate the transmitter without quantifying the neural ADP transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 7, 11, 14, 29, 318, DateTimeKind.Unspecified).AddTicks(7932),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 35, 43, 35, DateTimeKind.Local).AddTicks(8546),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 36,
                            OperatingSystemId = 3,
                            Problem = "We need to synthesize the 1080p COM capacitor!",
                            ProductId = 4,
                            Resolution = "You can't program the driver without generating the 1080p USB driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 8, 3, 13, 52, 880, DateTimeKind.Unspecified).AddTicks(9435),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 6, 50, 33, 506, DateTimeKind.Local).AddTicks(9564),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 37,
                            OperatingSystemId = 2,
                            Problem = "generating the protocol won't do anything, we need to hack the digital AI protocol!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 10, 6, 18, 40, 621, DateTimeKind.Unspecified).AddTicks(3312),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 14, 14, 48, 576, DateTimeKind.Local).AddTicks(1619),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 38,
                            OperatingSystemId = 5,
                            Problem = "calculating the system won't do anything, we need to transmit the wireless RAM system!",
                            ProductId = 2,
                            Resolution = "copying the protocol won't do anything, we need to copy the back-end EXE protocol!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 8, 4, 19, 972, DateTimeKind.Unspecified).AddTicks(7066),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 31, 47, 611, DateTimeKind.Local).AddTicks(7142),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 39,
                            OperatingSystemId = 3,
                            Problem = "copying the capacitor won't do anything, we need to back up the optical SMS capacitor!",
                            ProductId = 4,
                            Resolution = "generating the array won't do anything, we need to transmit the online THX array!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 5, 0, 40, 20, 0, DateTimeKind.Unspecified).AddTicks(2324),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 5, 15, 2, 929, DateTimeKind.Local).AddTicks(7788),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 40,
                            OperatingSystemId = 4,
                            Problem = "We need to override the 1080p JSON interface!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 10, 18, 42, 25, 11, DateTimeKind.Unspecified).AddTicks(2120),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 17, 6, 36, 746, DateTimeKind.Local).AddTicks(3964),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 41,
                            OperatingSystemId = 3,
                            Problem = "The XML panel is down, connect the back-end panel so we can connect the XML panel!",
                            ProductId = 4,
                            Resolution = "You can't transmit the bus without quantifying the digital AI bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 10, 16, 16, 26, 924, DateTimeKind.Unspecified).AddTicks(110),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 18, 58, 427, DateTimeKind.Local).AddTicks(8583),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 42,
                            OperatingSystemId = 2,
                            Problem = "connecting the application won't do anything, we need to bypass the mobile ADP application!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 7, 12, 52, 45, 683, DateTimeKind.Unspecified).AddTicks(2330),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 3, 58, 21, 435, DateTimeKind.Local).AddTicks(3934),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 43,
                            OperatingSystemId = 3,
                            Problem = "The JBOD circuit is down, program the neural circuit so we can program the JBOD circuit!",
                            ProductId = 4,
                            Resolution = "The SCSI circuit is down, index the open-source circuit so we can index the SCSI circuit!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 9, 0, 12, 44, 460, DateTimeKind.Unspecified).AddTicks(1870),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 42, 45, 742, DateTimeKind.Local).AddTicks(5403),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 44,
                            OperatingSystemId = 1,
                            Problem = "If we navigate the bandwidth, we can get to the RSS bandwidth through the back-end RSS bandwidth!",
                            ProductId = 3,
                            Resolution = "Try to hack the GB program, maybe it will hack the 1080p program!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 8, 22, 25, 46, 369, DateTimeKind.Unspecified).AddTicks(1864),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 3, 5, 58, 812, DateTimeKind.Local).AddTicks(9491),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 45,
                            OperatingSystemId = 5,
                            Problem = "If we connect the feed, we can get to the SDD feed through the virtual SDD feed!",
                            ProductId = 1,
                            Resolution = "You can't compress the bus without connecting the haptic SMS bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 11, 21, 51, 38, 981, DateTimeKind.Unspecified).AddTicks(6987),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 17, 8, 41, 922, DateTimeKind.Local).AddTicks(8361),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 46,
                            OperatingSystemId = 3,
                            Problem = "Try to input the XSS capacitor, maybe it will input the optical capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 9, 5, 50, 57, 0, DateTimeKind.Unspecified).AddTicks(9032),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 5, 18, 18, 492, DateTimeKind.Local).AddTicks(7842),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 47,
                            OperatingSystemId = 4,
                            Problem = "The JSON capacitor is down, connect the haptic capacitor so we can connect the JSON capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 11, 13, 48, 29, 765, DateTimeKind.Unspecified).AddTicks(3173),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 6, 15, 57, 523, DateTimeKind.Local).AddTicks(7196),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 48,
                            OperatingSystemId = 5,
                            Problem = "indexing the capacitor won't do anything, we need to copy the virtual USB capacitor!",
                            ProductId = 4,
                            Resolution = "The JBOD sensor is down, back up the digital sensor so we can back up the JBOD sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 7, 7, 13, 56, 979, DateTimeKind.Unspecified).AddTicks(8483),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 53, 17, 931, DateTimeKind.Local).AddTicks(8805),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 49,
                            OperatingSystemId = 2,
                            Problem = "navigating the circuit won't do anything, we need to parse the 1080p AGP circuit!",
                            ProductId = 4,
                            Resolution = "The JSON card is down, program the auxiliary card so we can program the JSON card!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 6, 3, 43, 53, 353, DateTimeKind.Unspecified).AddTicks(2143),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 9, 9, 27, 592, DateTimeKind.Local).AddTicks(2441),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 50,
                            OperatingSystemId = 4,
                            Problem = "You can't parse the system without copying the wireless THX system!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 9, 2, 36, 29, 775, DateTimeKind.Unspecified).AddTicks(6680),
                            TimeLastUpdated = new DateTime(2020, 2, 21, 2, 46, 52, 241, DateTimeKind.Local).AddTicks(8013),
                            VersionNumberId = 5
                        });
                });

            modelBuilder.Entity("StoneWare.Models.OperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("OperatingSystem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Day Trader Wannabe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Investment Overlord"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Workout Planner"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Social Anxiety Planner"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("VersionNumberId");

                    b.ToTable("ProductVersionOs");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 6,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 3,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 6,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 6,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Outstanding"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Resolved"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.VersionNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("VersionNumber");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "1.2"
                        },
                        new
                        {
                            Id = 4,
                            Description = "1.3"
                        },
                        new
                        {
                            Id = 5,
                            Description = "2.0"
                        },
                        new
                        {
                            Id = 6,
                            Description = "2.1"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.HasOne("StoneWare.Models.Status", "Status")
                        .WithMany("Issue")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Issue_Status")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.ProductVersionOs", "ProductVersionOs")
                        .WithMany("Issue")
                        .HasForeignKey("ProductId", "OperatingSystemId", "VersionNumberId")
                        .HasConstraintName("FK_Issue_ProductVersionOs")
                        .IsRequired();
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.HasOne("StoneWare.Models.OperatingSystem", "OperatingSystem")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("OperatingSystemId")
                        .HasConstraintName("FK_ProductVersionOs_OperatingSystem")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.Product", "Product")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductVersionOs_Product")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.VersionNumber", "VersionNumber")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("VersionNumberId")
                        .HasConstraintName("FK_ProductVersionOs_VersionNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
