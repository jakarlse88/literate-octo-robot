// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoneWare.Data;

namespace StoneWare.Migrations
{
    [DbContext(typeof(StoneWareContext))]
    [Migration("20200220220954_StoredProc")]
    partial class StoredProc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.ToTable("Issue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperatingSystemId = 4,
                            Problem = "We need to generate the multi-byte SMTP port!",
                            ProductId = 4,
                            Resolution = "I'll input the digital SMTP feed, that should feed the SMTP feed!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 9, 53, 22, 331, DateTimeKind.Local).AddTicks(9571),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 59, 1, 77, DateTimeKind.Local).AddTicks(1351),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 2,
                            OperatingSystemId = 2,
                            Problem = "Use the bluetooth SCSI alarm, then you can navigate the bluetooth alarm!",
                            ProductId = 3,
                            Resolution = "We need to connect the mobile TCP bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 5, 2, 41, 603, DateTimeKind.Local).AddTicks(8468),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 23, 56, 58, 6, DateTimeKind.Local).AddTicks(5426),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 3,
                            OperatingSystemId = 3,
                            Problem = "Use the solid state XSS firewall, then you can reboot the solid state firewall!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 20, 14, 35, 2, 110, DateTimeKind.Local).AddTicks(9760),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 8, 13, 623, DateTimeKind.Local).AddTicks(2832),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 4,
                            OperatingSystemId = 2,
                            Problem = "You can't calculate the interface without bypassing the virtual AGP interface!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 17, 25, 0, 597, DateTimeKind.Local).AddTicks(3850),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 3, 54, 11, 133, DateTimeKind.Local).AddTicks(4191),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 5,
                            OperatingSystemId = 2,
                            Problem = "Use the multi-byte HDD hard drive, then you can connect the multi-byte hard drive!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 5, 43, 27, 247, DateTimeKind.Local).AddTicks(553),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 11, 28, 11, 319, DateTimeKind.Local).AddTicks(4649),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 6,
                            OperatingSystemId = 2,
                            Problem = "Use the cross-platform CSS capacitor, then you can copy the cross-platform capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 14, 1, 36, 54, 424, DateTimeKind.Local).AddTicks(9017),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 12, 2, 16, 728, DateTimeKind.Local).AddTicks(4179),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 7,
                            OperatingSystemId = 2,
                            Problem = "We need to back up the neural RAM monitor!",
                            ProductId = 1,
                            Resolution = "Try to parse the FTP transmitter, maybe it will parse the back-end transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 22, 53, 31, 444, DateTimeKind.Local).AddTicks(6038),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 6, 20, 34, 683, DateTimeKind.Local).AddTicks(9184),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 8,
                            OperatingSystemId = 5,
                            Problem = "We need to override the open-source XSS firewall!",
                            ProductId = 2,
                            Resolution = "Try to bypass the SMTP bandwidth, maybe it will bypass the primary bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 3, 51, 0, 339, DateTimeKind.Local).AddTicks(9314),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 12, 35, 4, 581, DateTimeKind.Local).AddTicks(3410),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 9,
                            OperatingSystemId = 4,
                            Problem = "The SSL bandwidth is down, calculate the neural bandwidth so we can calculate the SSL bandwidth!",
                            ProductId = 4,
                            Resolution = "Use the cross-platform SCSI interface, then you can index the cross-platform interface!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 14, 27, 8, 943, DateTimeKind.Local).AddTicks(3534),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 34, 16, 12, DateTimeKind.Local).AddTicks(9148),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 10,
                            OperatingSystemId = 2,
                            Problem = "Use the multi-byte COM feed, then you can back up the multi-byte feed!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 17, 23, 51, 25, 866, DateTimeKind.Local).AddTicks(2837),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 20, 53, 58, 121, DateTimeKind.Local).AddTicks(4586),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 11,
                            OperatingSystemId = 2,
                            Problem = "Try to back up the HDD microchip, maybe it will back up the optical microchip!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 22, 4, 43, 55, DateTimeKind.Local).AddTicks(8763),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 8, 30, 43, 777, DateTimeKind.Local).AddTicks(3293),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 12,
                            OperatingSystemId = 5,
                            Problem = "quantifying the port won't do anything, we need to reboot the virtual SCSI port!",
                            ProductId = 2,
                            Resolution = "Use the multi-byte JSON panel, then you can bypass the multi-byte panel!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 14, 2, 54, 20, 675, DateTimeKind.Local).AddTicks(535),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 15, 17, 18, 401, DateTimeKind.Local).AddTicks(9816),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 13,
                            OperatingSystemId = 4,
                            Problem = "You can't input the protocol without generating the back-end EXE protocol!",
                            ProductId = 4,
                            Resolution = "Use the auxiliary RAM alarm, then you can generate the auxiliary alarm!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 3, 46, 12, 6, DateTimeKind.Local).AddTicks(3394),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 22, 47, 11, 872, DateTimeKind.Local).AddTicks(972),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 14,
                            OperatingSystemId = 4,
                            Problem = "The FTP sensor is down, transmit the cross-platform sensor so we can transmit the FTP sensor!",
                            ProductId = 1,
                            Resolution = "We need to hack the online SAS firewall!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 6, 29, 24, 614, DateTimeKind.Local).AddTicks(336),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 9, 11, 10, 356, DateTimeKind.Local).AddTicks(435),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 15,
                            OperatingSystemId = 4,
                            Problem = "Use the neural SSL bandwidth, then you can hack the neural bandwidth!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 19, 21, 58, 33, 546, DateTimeKind.Local).AddTicks(2069),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 21, 56, 286, DateTimeKind.Local).AddTicks(4910),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 16,
                            OperatingSystemId = 3,
                            Problem = "You can't reboot the protocol without synthesizing the digital JSON protocol!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 12, 11, 0, 434, DateTimeKind.Local).AddTicks(6214),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 3, 14, 715, DateTimeKind.Local).AddTicks(3266),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 17,
                            OperatingSystemId = 1,
                            Problem = "Try to back up the USB matrix, maybe it will back up the multi-byte matrix!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 12, 38, 36, 723, DateTimeKind.Local).AddTicks(6550),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 11, 23, 40, 314, DateTimeKind.Local).AddTicks(2062),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 18,
                            OperatingSystemId = 5,
                            Problem = "I'll navigate the open-source SSL sensor, that should sensor the SSL sensor!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 0, 43, 48, 656, DateTimeKind.Local).AddTicks(4114),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 19, 9, 7, 761, DateTimeKind.Local).AddTicks(9029),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 19,
                            OperatingSystemId = 1,
                            Problem = "I'll back up the multi-byte USB microchip, that should microchip the USB microchip!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 16, 46, 42, 269, DateTimeKind.Local).AddTicks(2513),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 16, 33, 1, 595, DateTimeKind.Local).AddTicks(7711),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 20,
                            OperatingSystemId = 5,
                            Problem = "Use the digital XSS microchip, then you can connect the digital microchip!",
                            ProductId = 2,
                            Resolution = "Try to transmit the FTP transmitter, maybe it will transmit the online transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 14, 34, 18, 738, DateTimeKind.Local).AddTicks(4934),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 37, 33, 235, DateTimeKind.Local).AddTicks(4209),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 21,
                            OperatingSystemId = 4,
                            Problem = "parsing the capacitor won't do anything, we need to compress the redundant HTTP capacitor!",
                            ProductId = 3,
                            Resolution = "You can't compress the application without transmitting the wireless RAM application!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 14, 3, 59, 758, DateTimeKind.Local).AddTicks(1976),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 44, 3, 766, DateTimeKind.Local).AddTicks(1646),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 22,
                            OperatingSystemId = 1,
                            Problem = "We need to parse the mobile PCI capacitor!",
                            ProductId = 3,
                            Resolution = "We need to compress the solid state SQL driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 6, 30, 22, 337, DateTimeKind.Local).AddTicks(6724),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 22, 7, 45, 376, DateTimeKind.Local).AddTicks(1889),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 23,
                            OperatingSystemId = 4,
                            Problem = "I'll bypass the mobile HDD application, that should application the HDD application!",
                            ProductId = 2,
                            Resolution = "overriding the capacitor won't do anything, we need to index the multi-byte XML capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 10, 3, 14, 675, DateTimeKind.Local).AddTicks(7459),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 51, 30, 45, DateTimeKind.Local).AddTicks(7826),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 24,
                            OperatingSystemId = 3,
                            Problem = "We need to calculate the primary IB application!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 17, 1, 57, 44, 59, DateTimeKind.Local).AddTicks(5009),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 3, 3, 15, 334, DateTimeKind.Local).AddTicks(6194),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 25,
                            OperatingSystemId = 2,
                            Problem = "transmitting the matrix won't do anything, we need to bypass the multi-byte JBOD matrix!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 17, 12, 56, 18, 22, DateTimeKind.Local).AddTicks(5499),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 16, 20, 58, 724, DateTimeKind.Local).AddTicks(1208),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 26,
                            OperatingSystemId = 2,
                            Problem = "You can't override the capacitor without connecting the cross-platform JSON capacitor!",
                            ProductId = 3,
                            Resolution = "I'll parse the primary CSS sensor, that should sensor the CSS sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 1, 5, 19, 573, DateTimeKind.Local).AddTicks(3782),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 8, 53, 319, DateTimeKind.Local).AddTicks(1001),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 27,
                            OperatingSystemId = 3,
                            Problem = "I'll reboot the auxiliary PCI interface, that should interface the PCI interface!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 9, 19, 33, 89, DateTimeKind.Local).AddTicks(8507),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 20, 46, 43, 945, DateTimeKind.Local).AddTicks(897),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 28,
                            OperatingSystemId = 5,
                            Problem = "quantifying the driver won't do anything, we need to program the wireless SQL driver!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 14, 17, 8, 578, DateTimeKind.Local).AddTicks(913),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 7, 21, 36, 183, DateTimeKind.Local).AddTicks(5224),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 29,
                            OperatingSystemId = 5,
                            Problem = "If we connect the transmitter, we can get to the IB transmitter through the online IB transmitter!",
                            ProductId = 2,
                            Resolution = "Try to input the CSS capacitor, maybe it will input the multi-byte capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 11, 34, 45, 211, DateTimeKind.Local).AddTicks(732),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 8, 36, 20, 968, DateTimeKind.Local).AddTicks(3852),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 30,
                            OperatingSystemId = 4,
                            Problem = "Try to override the USB panel, maybe it will override the multi-byte panel!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 5, 55, 14, 302, DateTimeKind.Local).AddTicks(3777),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 9, 1, 855, DateTimeKind.Local).AddTicks(8196),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 31,
                            OperatingSystemId = 2,
                            Problem = "Try to quantify the HTTP array, maybe it will quantify the optical array!",
                            ProductId = 1,
                            Resolution = "You can't connect the capacitor without copying the back-end SSL capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 8, 50, 10, 319, DateTimeKind.Local).AddTicks(3284),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 5, 7, 12, 492, DateTimeKind.Local).AddTicks(9513),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 32,
                            OperatingSystemId = 3,
                            Problem = "Try to input the SAS firewall, maybe it will input the primary firewall!",
                            ProductId = 4,
                            Resolution = "The SQL interface is down, index the bluetooth interface so we can index the SQL interface!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 7, 2, 55, 534, DateTimeKind.Local).AddTicks(3694),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 15, 51, 930, DateTimeKind.Local).AddTicks(7077),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 33,
                            OperatingSystemId = 1,
                            Problem = "I'll connect the bluetooth SMS driver, that should driver the SMS driver!",
                            ProductId = 1,
                            Resolution = "I'll program the neural TCP matrix, that should matrix the TCP matrix!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 4, 59, 15, 589, DateTimeKind.Local).AddTicks(8331),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 3, 32, 23, 520, DateTimeKind.Local).AddTicks(9788),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 34,
                            OperatingSystemId = 2,
                            Problem = "hacking the matrix won't do anything, we need to bypass the haptic COM matrix!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 22, 22, 10, 917, DateTimeKind.Local).AddTicks(9342),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 28, 19, 661, DateTimeKind.Local).AddTicks(2781),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 35,
                            OperatingSystemId = 6,
                            Problem = "Try to generate the HTTP protocol, maybe it will generate the auxiliary protocol!",
                            ProductId = 4,
                            Resolution = "You can't generate the transmitter without quantifying the neural ADP transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 18, 11, 55, 24, 669, DateTimeKind.Local).AddTicks(9267),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 18, 36, 28, 164, DateTimeKind.Local).AddTicks(9653),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 36,
                            OperatingSystemId = 3,
                            Problem = "We need to synthesize the 1080p COM capacitor!",
                            ProductId = 4,
                            Resolution = "You can't program the driver without generating the 1080p USB driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 19, 56, 1, 107, DateTimeKind.Local).AddTicks(7883),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 51, 18, 636, DateTimeKind.Local).AddTicks(679),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 37,
                            OperatingSystemId = 2,
                            Problem = "generating the protocol won't do anything, we need to hack the digital AI protocol!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 16, 51, 13, 367, DateTimeKind.Local).AddTicks(4121),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 2, 15, 33, 705, DateTimeKind.Local).AddTicks(2733),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 38,
                            OperatingSystemId = 5,
                            Problem = "calculating the system won't do anything, we need to transmit the wireless RAM system!",
                            ProductId = 2,
                            Resolution = "copying the protocol won't do anything, we need to copy the back-end EXE protocol!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 15, 5, 34, 16, DateTimeKind.Local).AddTicks(530),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 32, 32, 740, DateTimeKind.Local).AddTicks(8344),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 39,
                            OperatingSystemId = 3,
                            Problem = "copying the capacitor won't do anything, we need to back up the optical SMS capacitor!",
                            ProductId = 4,
                            Resolution = "generating the array won't do anything, we need to transmit the online THX array!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 22, 29, 33, 988, DateTimeKind.Local).AddTicks(5391),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 17, 15, 48, 58, DateTimeKind.Local).AddTicks(8999),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 40,
                            OperatingSystemId = 4,
                            Problem = "We need to override the 1080p JSON interface!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 4, 27, 28, 977, DateTimeKind.Local).AddTicks(5760),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 5, 7, 21, 875, DateTimeKind.Local).AddTicks(5223),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 41,
                            OperatingSystemId = 3,
                            Problem = "The XML panel is down, connect the back-end panel so we can connect the XML panel!",
                            ProductId = 4,
                            Resolution = "You can't transmit the bus without quantifying the digital AI bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 6, 53, 27, 64, DateTimeKind.Local).AddTicks(7847),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 19, 43, 556, DateTimeKind.Local).AddTicks(9847),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 42,
                            OperatingSystemId = 2,
                            Problem = "connecting the application won't do anything, we need to bypass the mobile ADP application!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 10, 17, 8, 305, DateTimeKind.Local).AddTicks(5749),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 15, 59, 6, 564, DateTimeKind.Local).AddTicks(5205),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 43,
                            OperatingSystemId = 3,
                            Problem = "The JBOD circuit is down, program the neural circuit so we can program the JBOD circuit!",
                            ProductId = 4,
                            Resolution = "The SCSI circuit is down, index the open-source circuit so we can index the SCSI circuit!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 22, 57, 9, 528, DateTimeKind.Local).AddTicks(6334),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 43, 30, 871, DateTimeKind.Local).AddTicks(6715),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 44,
                            OperatingSystemId = 1,
                            Problem = "If we navigate the bandwidth, we can get to the RSS bandwidth through the back-end RSS bandwidth!",
                            ProductId = 3,
                            Resolution = "Try to hack the GB program, maybe it will hack the 1080p program!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 0, 44, 7, 619, DateTimeKind.Local).AddTicks(6470),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 6, 43, 942, DateTimeKind.Local).AddTicks(811),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 45,
                            OperatingSystemId = 5,
                            Problem = "If we connect the feed, we can get to the SDD feed through the virtual SDD feed!",
                            ProductId = 1,
                            Resolution = "You can't compress the bus without connecting the haptic SMS bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 14, 1, 18, 15, 7, DateTimeKind.Local).AddTicks(1471),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 5, 9, 27, 51, DateTimeKind.Local).AddTicks(9680),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 46,
                            OperatingSystemId = 3,
                            Problem = "Try to input the XSS capacitor, maybe it will input the optical capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 17, 18, 56, 987, DateTimeKind.Local).AddTicks(9595),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 17, 19, 3, 621, DateTimeKind.Local).AddTicks(9216),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 47,
                            OperatingSystemId = 4,
                            Problem = "The JSON capacitor is down, connect the haptic capacitor so we can connect the JSON capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 14, 9, 21, 24, 223, DateTimeKind.Local).AddTicks(5535),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 16, 42, 652, DateTimeKind.Local).AddTicks(8575),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 48,
                            OperatingSystemId = 5,
                            Problem = "indexing the capacitor won't do anything, we need to copy the virtual USB capacitor!",
                            ProductId = 4,
                            Resolution = "The JBOD sensor is down, back up the digital sensor so we can back up the JBOD sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 18, 15, 55, 57, 9, DateTimeKind.Local).AddTicks(306),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 54, 3, 61, DateTimeKind.Local).AddTicks(190),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 49,
                            OperatingSystemId = 2,
                            Problem = "navigating the circuit won't do anything, we need to parse the 1080p AGP circuit!",
                            ProductId = 4,
                            Resolution = "The JSON card is down, program the auxiliary card so we can program the JSON card!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 19, 26, 0, 635, DateTimeKind.Local).AddTicks(6816),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 21, 10, 12, 721, DateTimeKind.Local).AddTicks(3875),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 50,
                            OperatingSystemId = 4,
                            Problem = "You can't parse the system without copying the wireless THX system!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 20, 33, 24, 213, DateTimeKind.Local).AddTicks(2400),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 47, 37, 370, DateTimeKind.Local).AddTicks(9452),
                            VersionNumberId = 5
                        });
                });

            modelBuilder.Entity("StoneWare.Models.OperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("OperatingSystem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Day Trader Wannabe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Investment Overlord"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Workout Planner"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Social Anxiety Planner"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("VersionNumberId");

                    b.ToTable("ProductVersionOs");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 6,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 3,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 6,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 6,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Outstanding"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Resolved"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.VersionNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("VersionNumber");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "1.2"
                        },
                        new
                        {
                            Id = 4,
                            Description = "1.3"
                        },
                        new
                        {
                            Id = 5,
                            Description = "2.0"
                        },
                        new
                        {
                            Id = 6,
                            Description = "2.1"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.HasOne("StoneWare.Models.Status", "Status")
                        .WithMany("Issue")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Issue_Status")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.ProductVersionOs", "ProductVersionOs")
                        .WithMany("Issue")
                        .HasForeignKey("ProductId", "OperatingSystemId", "VersionNumberId")
                        .HasConstraintName("FK_Issue_ProductVersionOs")
                        .IsRequired();
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.HasOne("StoneWare.Models.OperatingSystem", "OperatingSystem")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("OperatingSystemId")
                        .HasConstraintName("FK_ProductVersionOs_OperatingSystem")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.Product", "Product")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductVersionOs_Product")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.VersionNumber", "VersionNumber")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("VersionNumberId")
                        .HasConstraintName("FK_ProductVersionOs_VersionNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
