// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoneWare.Data;

namespace StoneWare.Migrations
{
    [DbContext(typeof(StoneWareContext))]
    [Migration("20200220215847_IssueData")]
    partial class IssueData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.ToTable("Issue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperatingSystemId = 4,
                            Problem = "We need to generate the multi-byte SMTP port!",
                            ProductId = 4,
                            Resolution = "I'll input the digital SMTP feed, that should feed the SMTP feed!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 9, 42, 14, 984, DateTimeKind.Local).AddTicks(1050),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 19, 47, 53, 730, DateTimeKind.Local).AddTicks(7322),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 2,
                            OperatingSystemId = 2,
                            Problem = "Use the bluetooth SCSI alarm, then you can navigate the bluetooth alarm!",
                            ProductId = 3,
                            Resolution = "We need to connect the mobile TCP bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 4, 51, 34, 257, DateTimeKind.Local).AddTicks(2724),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 23, 45, 50, 659, DateTimeKind.Local).AddTicks(9666),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 3,
                            OperatingSystemId = 3,
                            Problem = "Use the solid state XSS firewall, then you can reboot the solid state firewall!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 20, 14, 23, 54, 764, DateTimeKind.Local).AddTicks(4097),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 5, 57, 6, 276, DateTimeKind.Local).AddTicks(7088),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 4,
                            OperatingSystemId = 2,
                            Problem = "You can't calculate the interface without bypassing the virtual AGP interface!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 17, 13, 53, 250, DateTimeKind.Local).AddTicks(8102),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 3, 43, 3, 786, DateTimeKind.Local).AddTicks(8443),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 5,
                            OperatingSystemId = 2,
                            Problem = "Use the multi-byte HDD hard drive, then you can connect the multi-byte hard drive!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 5, 32, 19, 900, DateTimeKind.Local).AddTicks(4807),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 11, 17, 3, 972, DateTimeKind.Local).AddTicks(8904),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 6,
                            OperatingSystemId = 2,
                            Problem = "Use the cross-platform CSS capacitor, then you can copy the cross-platform capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 14, 1, 25, 47, 78, DateTimeKind.Local).AddTicks(3312),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 11, 51, 9, 381, DateTimeKind.Local).AddTicks(8473),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 7,
                            OperatingSystemId = 2,
                            Problem = "We need to back up the neural RAM monitor!",
                            ProductId = 1,
                            Resolution = "Try to parse the FTP transmitter, maybe it will parse the back-end transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 22, 42, 24, 98, DateTimeKind.Local).AddTicks(331),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 6, 9, 27, 337, DateTimeKind.Local).AddTicks(3477),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 8,
                            OperatingSystemId = 5,
                            Problem = "We need to override the open-source XSS firewall!",
                            ProductId = 2,
                            Resolution = "Try to bypass the SMTP bandwidth, maybe it will bypass the primary bandwidth!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 3, 39, 52, 993, DateTimeKind.Local).AddTicks(3557),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 12, 23, 57, 234, DateTimeKind.Local).AddTicks(7652),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 9,
                            OperatingSystemId = 4,
                            Problem = "The SSL bandwidth is down, calculate the neural bandwidth so we can calculate the SSL bandwidth!",
                            ProductId = 4,
                            Resolution = "Use the cross-platform SCSI interface, then you can index the cross-platform interface!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 14, 16, 1, 596, DateTimeKind.Local).AddTicks(7774),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 23, 8, 666, DateTimeKind.Local).AddTicks(3388),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 10,
                            OperatingSystemId = 2,
                            Problem = "Use the multi-byte COM feed, then you can back up the multi-byte feed!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 17, 23, 40, 18, 519, DateTimeKind.Local).AddTicks(7075),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 20, 42, 50, 774, DateTimeKind.Local).AddTicks(8825),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 11,
                            OperatingSystemId = 2,
                            Problem = "Try to back up the HDD microchip, maybe it will back up the optical microchip!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 21, 53, 35, 709, DateTimeKind.Local).AddTicks(2999),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 8, 19, 36, 430, DateTimeKind.Local).AddTicks(7530),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 12,
                            OperatingSystemId = 5,
                            Problem = "quantifying the port won't do anything, we need to reboot the virtual SCSI port!",
                            ProductId = 2,
                            Resolution = "Use the multi-byte JSON panel, then you can bypass the multi-byte panel!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 14, 2, 43, 13, 328, DateTimeKind.Local).AddTicks(4772),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 15, 6, 11, 55, DateTimeKind.Local).AddTicks(4054),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 13,
                            OperatingSystemId = 4,
                            Problem = "You can't input the protocol without generating the back-end EXE protocol!",
                            ProductId = 4,
                            Resolution = "Use the auxiliary RAM alarm, then you can generate the auxiliary alarm!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 3, 35, 4, 659, DateTimeKind.Local).AddTicks(7639),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 22, 36, 4, 525, DateTimeKind.Local).AddTicks(5218),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 14,
                            OperatingSystemId = 4,
                            Problem = "The FTP sensor is down, transmit the cross-platform sensor so we can transmit the FTP sensor!",
                            ProductId = 1,
                            Resolution = "We need to hack the online SAS firewall!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 6, 18, 17, 267, DateTimeKind.Local).AddTicks(4577),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 9, 0, 3, 9, DateTimeKind.Local).AddTicks(4676),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 15,
                            OperatingSystemId = 4,
                            Problem = "Use the neural SSL bandwidth, then you can hack the neural bandwidth!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 19, 21, 47, 26, 199, DateTimeKind.Local).AddTicks(6356),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 10, 48, 939, DateTimeKind.Local).AddTicks(9198),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 16,
                            OperatingSystemId = 3,
                            Problem = "You can't reboot the protocol without synthesizing the digital JSON protocol!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 11, 59, 53, 88, DateTimeKind.Local).AddTicks(459),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 52, 7, 368, DateTimeKind.Local).AddTicks(7510),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 17,
                            OperatingSystemId = 1,
                            Problem = "Try to back up the USB matrix, maybe it will back up the multi-byte matrix!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 12, 27, 29, 377, DateTimeKind.Local).AddTicks(793),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 11, 12, 32, 967, DateTimeKind.Local).AddTicks(6305),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 18,
                            OperatingSystemId = 5,
                            Problem = "I'll navigate the open-source SSL sensor, that should sensor the SSL sensor!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 0, 32, 41, 309, DateTimeKind.Local).AddTicks(8357),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 18, 58, 0, 415, DateTimeKind.Local).AddTicks(3273),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 19,
                            OperatingSystemId = 1,
                            Problem = "I'll back up the multi-byte USB microchip, that should microchip the USB microchip!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 16, 35, 34, 922, DateTimeKind.Local).AddTicks(6803),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 16, 21, 54, 249, DateTimeKind.Local).AddTicks(2001),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 20,
                            OperatingSystemId = 5,
                            Problem = "Use the digital XSS microchip, then you can connect the digital microchip!",
                            ProductId = 2,
                            Resolution = "Try to transmit the FTP transmitter, maybe it will transmit the online transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 14, 23, 11, 391, DateTimeKind.Local).AddTicks(9227),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 26, 25, 888, DateTimeKind.Local).AddTicks(8502),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 21,
                            OperatingSystemId = 4,
                            Problem = "parsing the capacitor won't do anything, we need to compress the redundant HTTP capacitor!",
                            ProductId = 3,
                            Resolution = "You can't compress the application without transmitting the wireless RAM application!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 13, 52, 52, 411, DateTimeKind.Local).AddTicks(6168),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 32, 56, 419, DateTimeKind.Local).AddTicks(5811),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 22,
                            OperatingSystemId = 1,
                            Problem = "We need to parse the mobile PCI capacitor!",
                            ProductId = 3,
                            Resolution = "We need to compress the solid state SQL driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 6, 19, 14, 991, DateTimeKind.Local).AddTicks(752),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 21, 56, 38, 29, DateTimeKind.Local).AddTicks(5896),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 23,
                            OperatingSystemId = 4,
                            Problem = "I'll bypass the mobile HDD application, that should application the HDD application!",
                            ProductId = 2,
                            Resolution = "overriding the capacitor won't do anything, we need to index the multi-byte XML capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 9, 52, 7, 329, DateTimeKind.Local).AddTicks(1371),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 15, 40, 22, 699, DateTimeKind.Local).AddTicks(1736),
                            VersionNumberId = 5
                        },
                        new
                        {
                            Id = 24,
                            OperatingSystemId = 3,
                            Problem = "We need to calculate the primary IB application!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 17, 1, 46, 36, 712, DateTimeKind.Local).AddTicks(8908),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 52, 7, 988, DateTimeKind.Local).AddTicks(94),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 25,
                            OperatingSystemId = 2,
                            Problem = "transmitting the matrix won't do anything, we need to bypass the multi-byte JBOD matrix!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 17, 12, 45, 10, 675, DateTimeKind.Local).AddTicks(9447),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 16, 9, 51, 377, DateTimeKind.Local).AddTicks(5155),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 26,
                            OperatingSystemId = 2,
                            Problem = "You can't override the capacitor without connecting the cross-platform JSON capacitor!",
                            ProductId = 3,
                            Resolution = "I'll parse the primary CSS sensor, that should sensor the CSS sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 0, 54, 12, 226, DateTimeKind.Local).AddTicks(7672),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 1, 57, 45, 972, DateTimeKind.Local).AddTicks(4890),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 27,
                            OperatingSystemId = 3,
                            Problem = "I'll reboot the auxiliary PCI interface, that should interface the PCI interface!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 9, 8, 25, 743, DateTimeKind.Local).AddTicks(2389),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 20, 35, 36, 598, DateTimeKind.Local).AddTicks(4779),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 28,
                            OperatingSystemId = 5,
                            Problem = "quantifying the driver won't do anything, we need to program the wireless SQL driver!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 14, 6, 1, 231, DateTimeKind.Local).AddTicks(4837),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 7, 10, 28, 836, DateTimeKind.Local).AddTicks(9147),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 29,
                            OperatingSystemId = 5,
                            Problem = "If we connect the transmitter, we can get to the IB transmitter through the online IB transmitter!",
                            ProductId = 2,
                            Resolution = "Try to input the CSS capacitor, maybe it will input the multi-byte capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 11, 23, 37, 864, DateTimeKind.Local).AddTicks(4609),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 8, 25, 13, 621, DateTimeKind.Local).AddTicks(7728),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 30,
                            OperatingSystemId = 4,
                            Problem = "Try to override the USB panel, maybe it will override the multi-byte panel!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 5, 44, 6, 955, DateTimeKind.Local).AddTicks(7650),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 21, 57, 54, 509, DateTimeKind.Local).AddTicks(2069),
                            VersionNumberId = 6
                        },
                        new
                        {
                            Id = 31,
                            OperatingSystemId = 2,
                            Problem = "Try to quantify the HTTP array, maybe it will quantify the optical array!",
                            ProductId = 1,
                            Resolution = "You can't connect the capacitor without copying the back-end SSL capacitor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 8, 39, 2, 972, DateTimeKind.Local).AddTicks(7152),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 4, 56, 5, 146, DateTimeKind.Local).AddTicks(3381),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 32,
                            OperatingSystemId = 3,
                            Problem = "Try to input the SAS firewall, maybe it will input the primary firewall!",
                            ProductId = 4,
                            Resolution = "The SQL interface is down, index the bluetooth interface so we can index the SQL interface!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 6, 51, 48, 187, DateTimeKind.Local).AddTicks(7558),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 22, 4, 44, 584, DateTimeKind.Local).AddTicks(940),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 33,
                            OperatingSystemId = 1,
                            Problem = "I'll connect the bluetooth SMS driver, that should driver the SMS driver!",
                            ProductId = 1,
                            Resolution = "I'll program the neural TCP matrix, that should matrix the TCP matrix!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 4, 48, 8, 243, DateTimeKind.Local).AddTicks(2188),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 3, 21, 16, 174, DateTimeKind.Local).AddTicks(3644),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 34,
                            OperatingSystemId = 2,
                            Problem = "hacking the matrix won't do anything, we need to bypass the haptic COM matrix!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 22, 11, 3, 571, DateTimeKind.Local).AddTicks(3241),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 17, 12, 314, DateTimeKind.Local).AddTicks(6680),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 35,
                            OperatingSystemId = 6,
                            Problem = "Try to generate the HTTP protocol, maybe it will generate the auxiliary protocol!",
                            ProductId = 4,
                            Resolution = "You can't generate the transmitter without quantifying the neural ADP transmitter!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 18, 11, 44, 17, 323, DateTimeKind.Local).AddTicks(3114),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 18, 25, 20, 818, DateTimeKind.Local).AddTicks(3500),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 36,
                            OperatingSystemId = 3,
                            Problem = "We need to synthesize the 1080p COM capacitor!",
                            ProductId = 4,
                            Resolution = "You can't program the driver without generating the 1080p USB driver!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 19, 44, 53, 761, DateTimeKind.Local).AddTicks(1725),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 40, 11, 289, DateTimeKind.Local).AddTicks(4521),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 37,
                            OperatingSystemId = 2,
                            Problem = "generating the protocol won't do anything, we need to hack the digital AI protocol!",
                            ProductId = 3,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 16, 40, 6, 20, DateTimeKind.Local).AddTicks(8033),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 2, 4, 26, 358, DateTimeKind.Local).AddTicks(6646),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 38,
                            OperatingSystemId = 5,
                            Problem = "calculating the system won't do anything, we need to transmit the wireless RAM system!",
                            ProductId = 2,
                            Resolution = "copying the protocol won't do anything, we need to copy the back-end EXE protocol!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 14, 54, 26, 669, DateTimeKind.Local).AddTicks(4360),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 6, 21, 25, 394, DateTimeKind.Local).AddTicks(2172),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 39,
                            OperatingSystemId = 3,
                            Problem = "copying the capacitor won't do anything, we need to back up the optical SMS capacitor!",
                            ProductId = 4,
                            Resolution = "generating the array won't do anything, we need to transmit the online THX array!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 20, 22, 18, 26, 641, DateTimeKind.Local).AddTicks(9216),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 17, 4, 40, 712, DateTimeKind.Local).AddTicks(2823),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 40,
                            OperatingSystemId = 4,
                            Problem = "We need to override the 1080p JSON interface!",
                            ProductId = 4,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 15, 4, 16, 21, 630, DateTimeKind.Local).AddTicks(9579),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 4, 56, 14, 528, DateTimeKind.Local).AddTicks(9040),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 41,
                            OperatingSystemId = 3,
                            Problem = "The XML panel is down, connect the back-end panel so we can connect the XML panel!",
                            ProductId = 4,
                            Resolution = "You can't transmit the bus without quantifying the digital AI bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 15, 6, 42, 19, 718, DateTimeKind.Local).AddTicks(1663),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 10, 8, 36, 210, DateTimeKind.Local).AddTicks(3663),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 42,
                            OperatingSystemId = 2,
                            Problem = "connecting the application won't do anything, we need to bypass the mobile ADP application!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 18, 10, 6, 0, 958, DateTimeKind.Local).AddTicks(9608),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 15, 47, 59, 217, DateTimeKind.Local).AddTicks(9064),
                            VersionNumberId = 1
                        },
                        new
                        {
                            Id = 43,
                            OperatingSystemId = 3,
                            Problem = "The JBOD circuit is down, program the neural circuit so we can program the JBOD circuit!",
                            ProductId = 4,
                            Resolution = "The SCSI circuit is down, index the open-source circuit so we can index the SCSI circuit!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 16, 22, 46, 2, 182, DateTimeKind.Local).AddTicks(146),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 32, 23, 525, DateTimeKind.Local).AddTicks(526),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 44,
                            OperatingSystemId = 1,
                            Problem = "If we navigate the bandwidth, we can get to the RSS bandwidth through the back-end RSS bandwidth!",
                            ProductId = 3,
                            Resolution = "Try to hack the GB program, maybe it will hack the 1080p program!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 17, 0, 33, 0, 273, DateTimeKind.Local).AddTicks(278),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 55, 36, 595, DateTimeKind.Local).AddTicks(4619),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 45,
                            OperatingSystemId = 5,
                            Problem = "If we connect the feed, we can get to the SDD feed through the virtual SDD feed!",
                            ProductId = 1,
                            Resolution = "You can't compress the bus without connecting the haptic SMS bus!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 14, 1, 7, 7, 660, DateTimeKind.Local).AddTicks(5327),
                            TimeLastUpdated = new DateTime(2020, 2, 19, 4, 58, 19, 705, DateTimeKind.Local).AddTicks(3537),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 46,
                            OperatingSystemId = 3,
                            Problem = "Try to input the XSS capacitor, maybe it will input the optical capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 17, 7, 49, 641, DateTimeKind.Local).AddTicks(3400),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 17, 7, 56, 275, DateTimeKind.Local).AddTicks(3020),
                            VersionNumberId = 4
                        },
                        new
                        {
                            Id = 47,
                            OperatingSystemId = 4,
                            Problem = "The JSON capacitor is down, connect the haptic capacitor so we can connect the JSON capacitor!",
                            ProductId = 1,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 14, 9, 10, 16, 876, DateTimeKind.Local).AddTicks(9337),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 18, 5, 35, 306, DateTimeKind.Local).AddTicks(2378),
                            VersionNumberId = 3
                        },
                        new
                        {
                            Id = 48,
                            OperatingSystemId = 5,
                            Problem = "indexing the capacitor won't do anything, we need to copy the virtual USB capacitor!",
                            ProductId = 4,
                            Resolution = "The JBOD sensor is down, back up the digital sensor so we can back up the JBOD sensor!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 18, 15, 44, 49, 662, DateTimeKind.Local).AddTicks(4153),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 2, 42, 55, 714, DateTimeKind.Local).AddTicks(4037),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 49,
                            OperatingSystemId = 2,
                            Problem = "navigating the circuit won't do anything, we need to parse the 1080p AGP circuit!",
                            ProductId = 4,
                            Resolution = "The JSON card is down, program the auxiliary card so we can program the JSON card!",
                            StatusId = 2,
                            TimeCreated = new DateTime(2020, 2, 19, 19, 14, 53, 289, DateTimeKind.Local).AddTicks(609),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 20, 59, 5, 374, DateTimeKind.Local).AddTicks(7668),
                            VersionNumberId = 2
                        },
                        new
                        {
                            Id = 50,
                            OperatingSystemId = 4,
                            Problem = "You can't parse the system without copying the wireless THX system!",
                            ProductId = 2,
                            StatusId = 1,
                            TimeCreated = new DateTime(2020, 2, 16, 20, 22, 16, 866, DateTimeKind.Local).AddTicks(6191),
                            TimeLastUpdated = new DateTime(2020, 2, 20, 14, 36, 30, 24, DateTimeKind.Local).AddTicks(3244),
                            VersionNumberId = 5
                        });
                });

            modelBuilder.Entity("StoneWare.Models.OperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("OperatingSystem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Day Trader Wannabe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Investment Overlord"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Workout Planner"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Social Anxiety Planner"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumberId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OperatingSystemId", "VersionNumberId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("VersionNumberId");

                    b.ToTable("ProductVersionOs");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 1,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 6,
                            VersionNumberId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 2,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 3,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 4,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            OperatingSystemId = 5,
                            VersionNumberId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 2,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 3,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 4,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            OperatingSystemId = 5,
                            VersionNumberId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 1,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 6,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 2,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 3,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 4,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            OperatingSystemId = 5,
                            VersionNumberId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 6,
                            VersionNumberId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 2,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 3,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 4,
                            VersionNumberId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            OperatingSystemId = 5,
                            VersionNumberId = 2
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Outstanding"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Resolved"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.VersionNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("VersionNumber");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "1.2"
                        },
                        new
                        {
                            Id = 4,
                            Description = "1.3"
                        },
                        new
                        {
                            Id = 5,
                            Description = "2.0"
                        },
                        new
                        {
                            Id = 6,
                            Description = "2.1"
                        });
                });

            modelBuilder.Entity("StoneWare.Models.Issue", b =>
                {
                    b.HasOne("StoneWare.Models.Status", "Status")
                        .WithMany("Issue")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Issue_Status")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.ProductVersionOs", "ProductVersionOs")
                        .WithMany("Issue")
                        .HasForeignKey("ProductId", "OperatingSystemId", "VersionNumberId")
                        .HasConstraintName("FK_Issue_ProductVersionOs")
                        .IsRequired();
                });

            modelBuilder.Entity("StoneWare.Models.ProductVersionOs", b =>
                {
                    b.HasOne("StoneWare.Models.OperatingSystem", "OperatingSystem")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("OperatingSystemId")
                        .HasConstraintName("FK_ProductVersionOs_OperatingSystem")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.Product", "Product")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductVersionOs_Product")
                        .IsRequired();

                    b.HasOne("StoneWare.Models.VersionNumber", "VersionNumber")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("VersionNumberId")
                        .HasConstraintName("FK_ProductVersionOs_VersionNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
